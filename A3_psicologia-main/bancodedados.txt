	cadastro professores:

CREATE TABLE professor (
    id INT(3) AUTO_INCREMENT PRIMARY KEY,
    nome VARCHAR(255) NOT NULL,
    cpf BIGINT(11) UNIQUE NOT NULL,
    telefone BIGINT(11) NOT NULL,
    email VARCHAR(255) NOT NULL UNIQUE,
    senha VARCHAR(255) NOT NULL,
    nivel VARCHAR(9) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT chk_prof_email CHECK (
        email LIKE '%@gmail%' OR email LIKE '%@hotmail%'
    )
);



	cadastro para alunos:

CREATE TABLE aluno (
    id INT(3) AUTO_INCREMENT PRIMARY KEY,
    nome VARCHAR(255) NOT NULL,
    cpf BIGINT(11) UNIQUE NOT NULL,
    ra BIGINT(9) UNIQUE NOT NULL,
    email VARCHAR(255) NOT NULL UNIQUE,
    senha INT (6) NOT NULL, -- Data de nascimento
    telefone BIGINT(11) NOT NULL,
    nivel VARCHAR(9) NOT NULL,
    professor_id INT NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (professor_id) REFERENCES professor(id) ON DELETE CASCADE,
    CONSTRAINT chk_aluno_email CHECK (
        email LIKE '%@ulife.com.br'
    )
);



    cadastro adm:

CREATE TABLE adm (
    id INT(3) AUTO_INCREMENT PRIMARY KEY,
    email VARCHAR(255) NOT NULL UNIQUE,
    senha VARCHAR(255) NOT NULL,
    nivel VARCHAR(9) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT chk_adm_email CHECK (
        email = 'ADM@ADM'
    )
);



	cadastro de paciente:

CREATE TABLE paciente (
    id INT(3) AUTO_INCREMENT PRIMARY KEY,
    data_abertura DATE NOT NULL,
    nome VARCHAR(255) NOT NULL,
    data_nascimento DATE NOT NULL,
    genero VARCHAR(255) NOT NULL,
    endereco VARCHAR(255) NOT NULL,
    telefone BIGINT(11) NOT NULL,
    email VARCHAR(150) UNIQUE,
    contato_emergencia BIGINT(11),
    escolaridade VARCHAR(50),
    ocupacao VARCHAR(50),
    necessidade VARCHAR(255),
    estagiario VARCHAR(255),
    orientador VARCHAR(255),
	nivel VARCHAR(9) NOT NULL,
    aluno_id INT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (aluno_id) REFERENCES aluno(id) ON DELETE CASCADE
);




    prontuario:

	CREATE TABLE prontuario (
    id INT(3) AUTO_INCREMENT PRIMARY KEY, 
    paciente_id INT NOT NULL,
    data_hora DATETIME NOT NULL,
    avaliacao TEXT,
    historico_familiar TEXT,
    historico_social TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (paciente_id) REFERENCES paciente(id) ON DELETE CASCADE
);



    sessao:
	id (int 3)
	id_prontuario(FK)
	data(data)
	sessao_text(text)
	anotacao VARCHAR (255)

	CREATE TABLE sessao (
    id INT(3) AUTO_INCREMENT PRIMARY KEY,
    paciente_id INT NOT NULL,
    aluno_id INT NOT NULL,
    professor_id INT NOT NULL,
    data_sessao DATETIME NOT NULL,
    status ENUM('pendente', 'realizada', 'faltou') DEFAULT 'pendente',
    prazo_envio DATETIME,
    observacoes TEXT,
    documentos VARCHAR(255),
	presenca BOOLEAN DEFAULT 0,    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (paciente_id) REFERENCES paciente(id) ON DELETE CASCADE,
    FOREIGN KEY (aluno_id) REFERENCES aluno(id) ON DELETE CASCADE,
    FOREIGN KEY (professor_id) REFERENCES professor(id) ON DELETE CASCADE
);

CREATE TABLE sessao (
    id INT(3) AUTO_INCREMENT PRIMARY KEY,
    paciente_id INT NOT NULL,               -- Paciente da sessão
    aluno_id INT NOT NULL,                  -- Aluno responsável pela sessão
    professor_id INT NOT NULL,              -- Professor responsável pelo aluno
    data_sessao DATETIME NOT NULL,
    status ENUM('pendente', 'realizada', 'faltou') DEFAULT 'pendente',
    prazo_envio DATETIME,                   -- Prazo de 48h para envio de observações
    observacoes TEXT,                       -- Observações feitas após a sessão
    documentos VARCHAR(255),                -- Caminho de upload dos arquivos
	presenca BOOLEAN DEFAULT 0,    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (paciente_id) REFERENCES paciente(id) ON DELETE CASCADE,
    FOREIGN KEY (aluno_id) REFERENCES aluno(id) ON DELETE CASCADE,
    FOREIGN KEY (professor_id) REFERENCES professor(id) ON DELETE CASCADE
);


	upload:
	CREATE TABLE upload (
    id INT AUTO_INCREMENT PRIMARY KEY,
    sessao_id INT NOT NULL,
    nome_arquivo VARCHAR(255) NOT NULL,
    caminho_arquivo VARCHAR(255) NOT NULL,
    upload_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (sessao_id) REFERENCES sessao(id) ON DELETE CASCADE
);



Menu ADM:
Listar todos os professores:
SELECT * FROM professor;



Tela de Alunos (específico do professor):
Listar alunos de um professor:
SELECT * FROM aluno WHERE professor_id = ?;



Tela de Pacientes (específico do aluno):
Listar pacientes de um aluno:
SELECT * FROM paciente WHERE aluno_id = ?;



Tela de Sessões (específico do paciente):
Listar sessões de um paciente:
SELECT * FROM sessao WHERE paciente_id = ?;


Prontuário:
Atualizar prontuário de uma sessão:
UPDATE sessao SET prontuario = ?, status = 'realizada' WHERE id = ?;


Uploads:
Registrar um arquivo:
INSERT INTO upload (sessao_id, nome_arquivo, caminho_arquivo) VALUES (?, ?, ?);


Consultar arquivos de uma sessão:
SELECT * FROM upload WHERE sessao_id = ?;



Notificações:
Localizar sessões pendentes após 48 horas:
SELECT * FROM sessao 
WHERE status = 'pendente' AND TIMESTAMPDIFF(HOUR, data_horario, NOW()) > 48;


Notificar o professor do aluno:
UPDATE sessao SET professor_notificado = TRUE WHERE id = ?;
